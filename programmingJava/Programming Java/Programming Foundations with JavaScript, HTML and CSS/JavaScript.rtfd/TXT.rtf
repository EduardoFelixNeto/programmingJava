{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red24\green24\blue24;\red5\green61\blue199;\red7\green72\blue221;
\red0\green0\blue255;\red255\green255\blue254;\red0\green0\blue0;\red14\green110\blue109;\red19\green118\blue70;
}
{\*\expandedcolortbl;;\cssrgb\c12157\c12157\c12157;\cssrgb\c0\c33725\c82353;\cssrgb\c0\c38431\c89412;
\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;\cssrgb\c0\c50196\c50196;\cssrgb\c3529\c52549\c34510;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Variables
\f1\b0 \
\
- \'93Boxes\'94 that holds value;\
- Declare with var\
- Assign with = \
\

\f0\b Expressions
\f1\b0 \
\
- Combinations of variables, constants and operations.\
\
newSimpleImage(\'93name\'94)\
\
- Create an image.\
\

\f0\b Methods
\f1\b0 \
\
- Perform some complex operation.\
- Act on an object.\
- Can have parameters.\
- Example: fgImage.getWidth();\
\

\f0\b Functions\
\

\f1\b0 function square(x) \{\
	ans = x * x;\
	return ans;\
\}\
\
var y = square(4); (= 16)\
\

\f0\b Types of Data\
\

\f1\b0 How does JavaScript know the type?\
\
- Keeps track of it with the value\
- Called \'93Dynamically typed\'94\
\
JAVA(Courses 2+)\
\
- \'93Statically typed\'94\
- Write types down in code\
- Checks for mistakes before you run
\f0\b \
\
For Loops
\f1\b0 \
\
var img = new SimpleImage(200,200);\
\
for(var pixel of img.values())\{\
    var newColor = 255;\
    pixel.setRed(newColor);\
    pixel.setBlue(newColor);\
\}\
print(img);\
\
\pard\pardeftab720\partightenfactor0

\fs88 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \expnd0\expndtw0\kerning0
Programming Exercise: Modifying Images\
\pard\pardeftab720\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.coursera.org/learn/duke-programming-web/lab-sandbox"}}{\fldrslt 
\f0\b\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf3 \

\fs32 \AppleTypeServices\AppleTypeServicesF65539 Pratique com o Lab Sandbox}}
\fs32 \AppleTypeServices \
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \AppleTypeServices\AppleTypeServicesF65539 \cf2 A link to a PDF of this exercise can be found in the Resources tab. Also, you will need to complete these exercises in the DukeLearnToProgram JavaScript environment: {\field{\*\fldinst{HYPERLINK "http://www.dukelearntoprogram.com/course1/example/index.php"}}{\fldrslt \cf4 \ul \ulc4 http://www.dukelearntoprogram.com/course1/example/index.php}} (also linked in the Resources tab).\
\pard\pardeftab720\sa320\partightenfactor0

\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf2 Part 1\

\f1\b0\fs32 \AppleTypeServices   Write a JavaScript program that modifies an image by putting three vertical stripes on it - a red stripe on the left one third, a green stripe in the middle, and a blue stripe on the right one third. For example, if your program ran on Drew\'92s picture shown on the left, the resulting image would have red, green and blue vertical stripes as shown in the image on the right.\
{{\NeXTGraphic UShuy3g2EeaxYA6oVw19Xw_32f9f25b846e45177deea2d3ca0dccbd_71-20_3_2_Q6.png \width4260 \height3195 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
The red stripe is made by changing the 
\f0\b red component
\f1\b0  of all the pixels in the 
\f0\b left vertical third
\f1\b0  to 255, while leaving the green and blue components as their values in the original image. The green and blue stripes are made similarly, but instead of modifying the red component of each pixel in the correct part of the image you will modify the green or blue component. \
Let\'92s consider what steps your program will need to take in order to modify this image.\
1. Start with the image you want to change. \
2. Figure out the width of the image. \
3. For each pixel in the image:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Get the x-coordinate for that pixel\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If the pixel\'92s x-coordinate is less than one-third of the image\'92s width, set the pixel\'92s red value to 255.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If the pixel\'92s x-coordinate is between one-third and two-thirds of the image\'92s width, set the pixel\'92s green value to 255.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If the pixel\'92s x-coordinate is more than two-thirds of the image\'92s width, set the pixel\'92s blue value to 255.\
\pard\pardeftab720\sa320\partightenfactor0
\cf2 4. Print the image.\
\
You may find the following methods helpful in writing your program: \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
values() \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
getWidth()\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
 getX() and getY() \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
setRed(), setGreen(), and setBlue\
\pard\pardeftab720\sa320\partightenfactor0
\cf2 You can learn more about these methods on Duke\'92s documentation page for this course: {\field{\*\fldinst{HYPERLINK "http://www.dukelearntoprogram.com/course1/doc/"}}{\fldrslt \cf4 \ul \ulc4 http://www.dukelearntoprogram.com/course1/doc/}} (also linked in the 
\f0\b Resources 
\f1\b0 tab). You can also review how x- and y-coordinates work on the documentation page: {\field{\*\fldinst{HYPERLINK "http://www.dukelearntoprogram.com/course1/doc/#coordinates"}}{\fldrslt \cf4 \ul \ulc4 http://www.dukelearntoprogram.com/course1/doc/#coordinates}}\

\f0\b\fs40 \AppleTypeServices\AppleTypeServicesF65539 Part 2\

\f1\b0\fs32 \AppleTypeServices Write a JavaScript function named swapRedGreen with one parameter pixel (representing a single pixel). This function should swap the red and green values of the pixel. For example, if you have a pixel with red = 255, green = 100, blue = 150, after calling swapRedGreen on that pixel its new RGB values would be red = 100, green = 255, blue = 150. \
To test your function, you should choose an image and apply the swapRedGreen function to every pixel in the image. The choice of your image is important. For some images you may not notice any change. What would happen if you used a completely black image, or a completely white image? What about an image with lots of red and not a lot of green? Think about what type of image you should use for testing your function. After choosing an image and applying the swapRedGreen function to every pixel in the image, make sure you print the resulting image so you can see whether your function worked correctly.  \

\f0\b\fs40 \AppleTypeServices\AppleTypeServicesF65539 Part 3\

\f1\b0\fs32 \AppleTypeServices   Write code to change the Duke blue devil (the image below on the left) to be yellow (as in the image below on the right). \
\pard\pardeftab720\sa320\partightenfactor0
\cf2 {{\NeXTGraphic ZdwBFHg3EeaxYA6oVw19Xw_0291b8c9d1a5e677c82d4033bdd38bdd_71-20_3_2_Q8-1.png \width4761 \height2016 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\sa320\partightenfactor0
\cf2 \
  Start by working this smaller example by hand. You want to turn the image below on the left into the image below on the right. What are the steps you will need to take? Once you have worked through this example by hand to determine the steps you will need to take, you can translate your algorithm into code.  \
\pard\pardeftab720\sa320\partightenfactor0
\cf2 {{\NeXTGraphic of7mvXg3EeaNlA6zo4Pi2Q_0aa5cb1acced841ec79d46f7c7c1b43c_71-20_3_G_Q3.png \width8236 \height2227 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\sa320\partightenfactor0
\cf2 \
Hint: You need to somehow identify the blue pixels. What makes the blue pixels different from the white pixels? What are some conditions you could use to identify the blue pixels?
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\fs88 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \expnd0\expndtw0\kerning0
Programming Exercise: Advanced Modifying Images\
\pard\pardeftab720\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.coursera.org/learn/duke-programming-web/lab-sandbox"}}{\fldrslt 
\f0\b\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf3 \
\pard\pardeftab720\qc\partightenfactor0

\fs32 \AppleTypeServices\AppleTypeServicesF65539 \cf3 Pratique com o Lab Sandbox}}
\fs32 \AppleTypeServices \
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \AppleTypeServices\AppleTypeServicesF65539 \cf2 A PDF of this programming exercise can be downloaded from the Resources tab. Also, you will need to complete these exercises in the DukeLearnToProgram JavaScript environment: {\field{\*\fldinst{HYPERLINK "http://www.dukelearntoprogram.com/course1/example/index.php"}}{\fldrslt \cf4 \ul \ulc4 http://www.dukelearntoprogram.com/course1/example/index.php}} (also linked in the Resources tab).\
\pard\pardeftab720\sa320\partightenfactor0

\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf2 Part 1 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \AppleTypeServices \cf2 Write the green screen algorithm you saw in the lecture video yourself. To make sure you really understand the code that was written in the video, you should write the code yourself without looking at the video unless you get stuck and need to refer back to it for a hint. \
\pard\pardeftab720\sa320\partightenfactor0

\f0\b\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf2 Part 2 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \AppleTypeServices \cf2   Your friend is trying to write a program that draws a square 200 pixels by 200 pixels and that looks like this square with colors red (red value 255), green (green value 255), blue (blue value 255) and magenta (red value 255 and blue value 255). All other RGB values are set to 0.\
\pard\pardeftab720\sa320\partightenfactor0
\cf2 {{\NeXTGraphic s61ZdXg5EealOA67wFuqoQ_a769b3559e3d4b519ea351eb90b50b49_71-20_3_3_PE4-1.png \width3000 \height3000 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\sa320\partightenfactor0
\cf2 \
  Your friend has written code to try to solve this problem, however their code has a bug, and produces this image: \
\pard\pardeftab720\sa320\partightenfactor0
\cf2 {{\NeXTGraphic C4Jl5Xg6Eead-BJkoDOYOw_fc12cfdc04f7cb30bacc61725217bdd5_71-20_3_3_PE4-2.png \width3000 \height3000 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\sa320\partightenfactor0
\cf2 \
  Here is their code: \
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf5 \cb6 \outl0\strokewidth0 \strokec5 var\cf0 \strokec7  img = \cf5 \strokec5 new\cf0 \strokec7  \cf8 \strokec8 SimpleImage\cf0 \strokec7 (\cf9 \strokec9 200\cf0 \strokec7 ,\cf9 \strokec9 200\cf0 \strokec7 );\cb1 \
\cf5 \cb6 \strokec5 for\cf0 \strokec7  (\cf5 \strokec5 var\cf0 \strokec7  px \cf5 \strokec5 of\cf0 \strokec7  img.values())\{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb6   \cf5 \strokec5 var\cf0 \strokec7  x = px.getX();\cb1 \
\cb6   \cf5 \strokec5 var\cf0 \strokec7  y = px.getY();\cb1 \
\cb6   \cf5 \strokec5 if\cf0 \strokec7  (x < img.getWidth()/\cf9 \strokec9 2\cf0 \strokec7 )\{\cb1 \
\cb6     px.setRed(\cf9 \strokec9 255\cf0 \strokec7 );\cb1 \
\cb6   \}\cb1 \
\cb6   \cf5 \strokec5 if\cf0 \strokec7  (y>img.getHeight()/\cf9 \strokec9 2\cf0 \strokec7 )\{\cb1 \
\cb6     px.setBlue(\cf9 \strokec9 255\cf0 \strokec7 );\cb1 \
\cb6   \}\cb1 \
\cb6   \cf5 \strokec5 else\cf0 \strokec7  \{\cb1 \
\cb6     px.setGreen(\cf9 \strokec9 255\cf0 \strokec7 );\cb1 \
\cb6   \}\cb1 \
\cb6 \}\cb1 \
\cb6 print (img);\
\
\pard\pardeftab720\sa320\partightenfactor0

\f1\fs32 \cf2 \cb1 \outl0\strokewidth0  Your task is to find and fix the bug. Use what you have learned about applying the scientific method to debugging: gather information, apply your knowledge about images and programming, form a hypothesis, test your hypothesis, and finally, change the code to fix the problem.\
\pard\pardeftab720\sa320\partightenfactor0

\f0\b\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf2 Part 3\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \AppleTypeServices \cf2 Write a function named setBlack that has one parameter pixel (representing a single pixel) and returns pixel with its red, green, and blue components changed so that the pixel\'92s color is black.\
Now you will write another function named addBorder. This function will add a black border to an image, such as in the following example:\
\pard\pardeftab720\sa320\partightenfactor0
\cf2 {{\NeXTGraphic jDKUzng6EeamDApmnD43Fw_23c2603c153c1ce599c27bc65e1fc94e_71-20_3_3_Q7.png \width8294 \height3024 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\sa320\partightenfactor0
\cf2 \
On the left, we have the original image, and on the right, we have modified the image by giving it a black border that is 10 pixels thick. Note that the image size of the image with the border is the same as the original image because the border is not added around the outside of the original image, instead it covers up some of the original image.\
Work through the seven steps to write this function. Work an example by hand and note the steps you took before translating your algorithm to code. Which pixels should be part of the border? How will you identify those pixels? Once you have identified them, how will you make them black?  \
Hints: \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The function will require two parameters: the image you want to modify, and the thickness of the border. Remember that you can name parameters whatever you want, but it is good to name them something informative. For example, in this case, you may want to use names like image and thickness. \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Remember that you wrote a setBlack function. \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Remember that images have a getWidth() method and a getHeight() method.\
\pard\pardeftab720\sa320\partightenfactor0
\cf2 After you have written the function, test it by calling it with different border thicknesses. If anything is not working as expected, form a hypothesis about what is happening, gather information, test your hypothesis, and fix the code.
\f2\fs24 \cf0 \outl0\strokewidth0 \strokec7 \
}